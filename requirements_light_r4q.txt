## Техническое задание на разработку API для сравнения текстов

### Общие требования
- **Цель API**: предоставление функциональности для сравнения текстов с использованием моделей LLM.
- **Пользователи**: система должна обслуживать администраторов и конечных пользователей с разделением прав и возможностей.
- **Безопасность**: использование JWT токенов для аутентификации и HMAC подписей для авторизации запросов.
- **Масштабируемость**: архитектура API должна поддерживать масштабирование для обработки больших объемов запросов.
- **Реализация**: Python и Django. Для управления и настройки API использовать стандартную admin панель Django. Доступ пользователей предполагается по api.
  

### 1. Управление конфигурацией модели (TypeID)
- **Создание TypeID**:
  - Администратор создаёт TypeID с параметрами модели (scale, system, user, model, llm, description).
  - CRUD операции над TypeID выполняются через Django Admin.
  
- **Функции API**:
  - `POST /api/v1/types`: Создание TypeID.
  - `PUT /api/v1/types/{typeid}`: Редактирование TypeID.
  - `DELETE /api/v1/types/{typeid}`: Удаление TypeID.

### 2. Управление API ключами
- **Генерация и управление ключами**:
  - Администратор выдает API ключи, связанные с TypeID.
  - Пользователи могут иметь несколько ключей с разными TypeID.

- **Функции API**:
  - `POST /api/v1/keys`: Создание API ключа.
  - `DELETE /api/v1/keys/{api_key}`: Удаление API ключа.
  - `GET /api/v1/billing/{api_key}`: Получение информации о биллинге и использовании.

### 3. Авторизация пользователя
- **Процесс**:
  - Формирование HMAC подписи с использованием api_key, secret_key, и имени пользователя.
  - Проверка подписи и активности подписки сервером перед выдачей JWT токена.

- **Функции API**:
  - `POST /api/v1/auth`: Авторизация пользователя и выдача JWT токена.

### 4. Работа с текстами
- **Загрузка и сравнение текстов**:
  - Тексты загружаются и сравниваются в формате Base64.
  - Для каждого запроса используются параметры TypeID для формирования запросов к модели LLM.

- **Функции API**:
  - `POST /api/v1/reference`: Загрузка эталонного текста.
  - `POST /api/v1/compare/{reference_id}`: Сравнение загруженного текста с эталонным.

### 5. Дополнительные функции
- **Проверка подписки**:
  - Перед выполнением операций с текстами проверяется статус подписки.

- **Функции API**:
  - `GET /api/v1/subscription/{api_key}`: Проверка статуса подписки.

### Интеграция и безопасность
- **HTTPS**: все запросы к API должны использовать HTTPS для защиты данных.
- **Обновление токенов и мониторинг**: реализация механизмов для обновления токенов и мониторинга активности по API ключам.

### Документация и поддержка
- **Документация API**: создание подробной документации с описанием всех функций, параметров и примеров использования.
- **Поддержка и обработка ошибок**: система должна предоставлять информативные сообщения об ошибках на каждом этапе работы с API.